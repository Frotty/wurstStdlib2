package UnitUtils
import BuffObjEditing
import ClosureTimers



/*	This file contains various utility functions for Unit, 
	which require enhanced functionality like closures and cannot be defined in Unit.wurst */

@configurable public real FIELD_OF_VIEW_FRONT  = 230.00
@configurable public real FIELD_OF_VIEW_BEHIND = 115.00  // Real FoV is: 180 - 2x (FIELD_OF_VIEW-90)	Using a value of 115 generates a FoV of 130   (natural FoV is about 135 degrees)

/** Apply Buff to this unit for duration.*/
@configurable public function unit.applyBuffTimed(buffTuple buffApplied, real duration)
	this.addAbility(buffApplied.abilId)
	this.setAbilityLevel(buffApplied.abilId, 1)
	doAfter(duration) ->
		if this != null
			this.setAbilityLevel(buffApplied.abilId, 0)
			this.removeAbility(buffApplied.abilId)
			
/** Increase Armor of a unit for a duration */
@configurable public function unit.addArmorTimed(real armorAdd, real duration)
	BlzSetUnitArmor(this, this.getArmor()+armorAdd)
	doAfter(duration) ->
		if this != null
			BlzSetUnitArmor(this, this.getArmor()-armorAdd)
			
/** Increase Damage of a unit for a duration */		
@configurable public function unit.addDamageTimed(int damageAdd, real duration)
	BlzSetUnitBaseDamage(this, this.getBaseDamage(1)+damageAdd, 1)
	doAfter(duration) ->
		if this != null
			BlzSetUnitBaseDamage(this, this.getBaseDamage(1)-damageAdd, 1)

/** Returns true if this unit is behind target unit.
    Uses configurable FIELD_OF_VIEW_BEHIND variable with default value of 115. */
public function unit.isBehind(unit targetUnit) returns bool
	let degreeDif = this.getFacingAngle().degrees() - targetUnit.getFacingAngle().degrees()
	return -FIELD_OF_VIEW_BEHIND <= degreeDif and degreeDif <= FIELD_OF_VIEW_BEHIND

/** Returns true if this unit is in front of target unit.
	Uses configurable FIELD_OF_VIEW_FRONT variable with default value of 230. */
public function unit.isInFront(unit targetUnit) returns bool
	let degreeDif = this.getFacingAngle().degrees() - targetUnit.getFacingAngle().degrees()
	return -FIELD_OF_VIEW_FRONT <= degreeDif and degreeDif <= FIELD_OF_VIEW_FRONT

/** Change unit attack cooldown by given percentage. */
@configurable public function unit.setAttackCooldownPercChange(real attackCooldownPercChange, int weaponIndex) returns real
	let newSpeed = this.getAttackCooldown(weaponIndex)/(1+attackCooldownPercChange)
	this.setAttackCooldown(newSpeed, weaponIndex)
	return newSpeed
   
/** Change unit movement speed by given percentage. */
@configurable public function unit.setMoveSpeedPercChange(real movespeedPercChange) returns real
	let oldSpeed = this.getMoveSpeed()
	let newSpeed = oldSpeed + (oldSpeed*movespeedPercChange)
	this.setMoveSpeed(newSpeed)
	return newSpeed
	