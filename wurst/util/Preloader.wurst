package Preloader
import NoWurst
import ErrorHandling
import Group
import DummyRecycler
import ObjectIds
import Basics

/*
 * * * * * * * * PreloadHandler * * * * * * * * * * * * *
 * The PreloadHandler helps you to preload resources  	*
 * at mapstart, to avoid first-laggs.					*
 * Use the corresponding function to preload the data	*
 * you want.											*
 *														*
														*/
boolean autoFinish = true
group dumg
unit dum
/** use this function to preload an ability at runtime
	returns true if the ability exists and was therefore preloaded. */
public function preloadAbility(int abilid) returns boolean
	dum.addAbility(abilid)
	var result = true
	if dum == null 
		error("Do not load abilities after map init when autoFinish = true")
	else if GetUnitAbilityLevel(dum, abilid) == 0
		printLog(Loglevel.TRACE, "PreloadAbility: Ability " + int2fourchar(abilid) + " does not exist.")
		result = false
	return result

public function preloadUnit(int unitId) returns boolean
	if dumg == null 
		error("PreloadUnit: Group dumg does not exist")
	let u = createUnit(DUMMY_PLAYER, unitId, vec2(0,0), angle(0))
	dumg.addUnit(u)
	return u.isAlive()

public function finishPreload()
	dum.remove()
	for u in dumg
		u.remove()
	dumg.destr()
	if GetExpiredTimer() != null
		GetExpiredTimer().destr()

init
	dumg = CreateGroup()
	dum = createUnit(DUMMY_PLAYER, DUMMY_UNIT_ID, vec2(0,0), angle(0))
	if dum == null
		error("DUMMY_UNITID (" + int2fourchar(DUMMY_UNIT_ID) + ") not added correctly to the map.")
	if autoFinish
		CreateTimer().start(0.0, function finishPreload )
