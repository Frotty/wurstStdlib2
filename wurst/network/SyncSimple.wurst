package SyncSimple
import LinkedList
import ChunkedString

/* 	Lightweight String Syncing with listeners for Patches 1.31 and up.

	Sync a string:
	>	myString().sync() (syncedMyString) ->
	>		Log.info("string synced: " + syncedMyString)

*/

@configurable public constant SYNC_PREFIX = "S"

public interface StringSyncListener
	function onDataSynced(string data)

public interface BufferSyncListener
	function onDataSynced(ChunkedString buffer)

class SyncData
	StringSyncListener slistener = null
	BufferSyncListener blistener = null
	player syncer = null
	string data = null
	ChunkedString buffer = null
	ChunkedString syncBuffer = null

	construct(player syncer, StringSyncListener slistener, string data)
		this.slistener = slistener
		this.data = data
		this.syncer = syncer

	construct(player syncer, BufferSyncListener blistener, ChunkedString data)
		this.blistener = blistener
		this.buffer = data
		this.syncer = syncer
		this.syncBuffer = new ChunkedString()

	ondestroy
		if slistener != null
			destroy slistener
		if blistener != null
			destroy blistener

constant syncQueue = new LinkedList<SyncData>

public function ChunkedString.sync(player p, BufferSyncListener listener)
	syncQueue.add(new SyncData(p, listener, this))

	if syncQueue.size() == 1
		checkQueue()

public function string.sync(player p, StringSyncListener listener)
	syncQueue.add(new SyncData(p, listener, this))

	if syncQueue.size() == 1
		checkQueue()

function checkQueue()
	if not syncQueue.isEmpty()
		let syncData = syncQueue.getFirst()
		if syncData.data != null
			if localPlayer == syncData.syncer
				BlzSendSyncData(SYNC_PREFIX, syncData.data)
		else
			let data = syncData.buffer.readChunk()
			if localPlayer == syncData.syncer
				BlzSendSyncData(SYNC_PREFIX, data)

init
	let trig = CreateTrigger()
	for i = 0 to bj_MAX_PLAYER_SLOTS - 1
		BlzTriggerRegisterPlayerSyncEvent(trig, players[i], SYNC_PREFIX, false)

	trig.addAction() ->
		let eventData = BlzGetTriggerSyncData()
		let syncData = syncQueue.getFirst()
		if syncData.data != null
			syncData.slistener.onDataSynced(eventData)
			syncQueue.dequeue()
			destroy syncData
		else
			syncData.syncBuffer.append(eventData)
			if not syncData.buffer.hasChunk()
				syncData.syncBuffer.flush()
				syncData.blistener.onDataSynced(syncData.syncBuffer)
				syncQueue.dequeue()
				destroy syncData
		checkQueue()

