package SyncSimple
import LinkedList

/* 	Lightweight String Syncing with listeners for Patches 1.31 and up.

	Sync a string:
	>	myString().sync() (syncedMyString) ->
	>		Log.info("string synced: " + syncedMyString)

*/

@configurable public constant SYNC_PREFIX = "S"

public interface SyncListener
	function onDataSynced(string data)

class SyncData
	SyncListener listener
	player syncer
	string data

	construct(player syncer, SyncListener listener, string data)
		this.listener = listener
		this.data = data
		this.syncer = syncer

	ondestroy
		destroy listener

constant syncQueue = new LinkedList<SyncData>

public function string.sync(player p, SyncListener listener)
	syncQueue.add(new SyncData(p, listener, this))

	if syncQueue.size() == 1
		checkQueue()

function checkQueue()
	if not syncQueue.isEmpty()
		let syncData = syncQueue.getFirst()
		if GetLocalPlayer() == syncData.syncer
			BlzSendSyncData(SYNC_PREFIX, syncData.data)

init
	let trig = CreateTrigger()
	for i = 0 to bj_MAX_PLAYER_SLOTS - 1
		BlzTriggerRegisterPlayerSyncEvent(trig, players[i], SYNC_PREFIX, false)

	trig.addAction() ->
		let data = syncQueue.dequeue()
		data.listener.onDataSynced(BlzGetTriggerSyncData())
		destroy data
		checkQueue()


