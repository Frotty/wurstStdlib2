package StringEncoder
import HashData
import Execute
import HashMap
import ErrorHandling
import NetworkConfig
import SafetyChecks

// characters that can be sent over the network
public constant STRING_ALPHABET = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
public constant STRING_ALPHABET_LENGTH = compiletime(STRING_ALPHABET.length())
// lookup table for alphabet
let alphabetLookup = new HashMap<int, int>()

function getCharFromIndex(int i) returns string
	if i > STRING_ALPHABET_LENGTH
		error("Network: trying to get invalid character from index '" + i.toString() + "'")
	return STRING_ALPHABET.charAt(i)

function getIndexFromChar(string c) returns int
	int hash
	if (c.toUpperCase() == c and c.toLowerCase() != c) or c == "/"
		hash = ("00" + c).getHash()
	else
		hash = c.getHash()

	if SAFETY_CHECKS_ENABLED and not alphabetLookup.has(hash)
		error("Network: trying to get index from invalid character '" + c + "'")

	return alphabetLookup.get(hash)

// only called in the init block
function precomputeLookup()
	for i = 0 to STRING_ALPHABET_LENGTH - 1
		let c = STRING_ALPHABET.charAt(i)

		if (c.toUpperCase() == c and c.toLowerCase() != c) or c == "/"
			alphabetLookup.put(("00" + c).getHash(), i)
		else
			alphabetLookup.put(c.getHash(), i)

function testCollisions()
	// this test here is mostly to ensure that the StringHash implementation in WC3 never collides
	// for our use case, especially if it's somehow changed by a patch
	for i = 0 to STRING_ALPHABET_LENGTH - 1
		if getIndexFromChar(getCharFromIndex(i)) != i
			Log.error("CollisionTest failed for " + i.toString() + " " + getCharFromIndex(i))
			Log.error("getIndexFromChar() == " + getIndexFromChar(getCharFromIndex(i)).toString())
			Log.error("getCharFromIndex(getIndexFromChar)) == " + getCharFromIndex(getIndexFromChar(getCharFromIndex(i))))
			Log.error("This is a BAD thing and you should report it to wurst devs!")

init
	execute(() -> precomputeLookup())
	execute(() -> testCollisions())
/**
	Utility class to convert a string to/from a series of ints corellating to positions in STRING_ALPHABET.
**/
public class StringEncoder
	private var asciiIntCount = 0
	private var stringCount = 0

	private var currentValue = ""
	private var counter = 0

	private var dataWriter = new HashWriter()
	private HashReader dataReader

	ondestroy
		if dataWriter != null
			destroy dataWriter

		if dataReader != null
			destroy dataReader

	private function encodeString(string value)
		let length = value.length()
		counter = 0
		dataWriter.writeInt(length)
		asciiIntCount++
		
		executeWhile(CHARS_PER_ENCODE_DECODE, () -> counter < length) ->
			dataWriter.writeInt(getIndexFromChar(value.charAt(counter)))
			counter++
			asciiIntCount++

	private function decodeString() returns string
		currentValue = ""
		let length = dataReader.readIntUnchecked()
		asciiIntCount--
		counter = 0

		executeWhile(CHARS_PER_ENCODE_DECODE, () -> counter < length) ->
			currentValue += getCharFromIndex(dataReader.readIntUnchecked())
			counter++
			asciiIntCount--
		
		return currentValue

	function encode()
		executeWhile(DATA_PER_EXECUTE, () -> stringCount > 0, () -> encodeString(popString()))

	function decode()
		dataReader = dataWriter.intoReader()
		dataWriter = null
		executeWhile(DATA_PER_EXECUTE, () -> asciiIntCount > 0, () -> pushString(decodeString()))

	function pushString(string value)
		stringCount++
		dataWriter.writeString(value)

	function popString() returns string
		stringCount--
		return dataReader.readString()

	function pushInt(int value)
		asciiIntCount++
		dataWriter.writeInt(value)

	function popInt() returns int
		asciiIntCount--
		return dataReader.readIntUnchecked()

	function getIntCount() returns int
		return asciiIntCount

	function getStringCount() returns int
		return stringCount