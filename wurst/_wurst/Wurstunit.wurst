package Wurstunit
import NoWurst
import Integer
import Real
import Boolean
// Wurst unit testing library


@compiletimenative public function testPrint(string msg)
@compiletimenative public function testFail(string msg)
@compiletimenative public function testSuccess()

/**
 * Asserts that two ints are equal. If they are not, an error is thrown with a message.
 *
 * int expected - the expected value
 */
public function int.assertEquals(int expected)
	if this != expected
		testFail("Expected <" + expected.toString() + ">, Actual <" + this.toString() + ">")

/**
 * Asserts that two strings are equal. If they are not, an error is thrown with a message.
 *
 * string expected - the expected value
 */		
public function string.assertEquals(string expected)
	if this != expected
		testFail("Expected <" + expected + ">, Actual <" + this + ">")

/**
 * Asserts that two reals are equal. If they are not, an error is thrown with a message.
 *
 * real expected - the expected value
 */		
public function real.assertEquals(real expected)
	if this != expected
		testFail("Expected <" + expected.toString() + ">, Actual <" + this.toString() + ">")

/**
 * Asserts that two reals are equal to within a positive delta. If they are not, an error is thrown
 * with a message.
 *
 * real expected - the expected value
 * real delta - the maximum delta between this value and the expected value
 */		
public function real.assertEquals(real expected, real delta)
	if (this - expected > delta) or (expected - this > delta)
		testFail("Expected <" + expected.toString() + ">, Actual <" + this.toString() + " with delta " + delta.toString() + ">")

/**
 * Asserts that two booleans are equal. If they are not, an error is thrown with a message.
 *
 * boolean expected - the expected value
 */
public function boolean.assertEquals(boolean expected)
	if this != expected
		testFail("Expected <" + expected.toString() + ">, Actual <" + this.toString() + ">")

/** Asserts that this booleans is true. If it is not, an error is thrown with a message. */
public function boolean.assertTrue()
	this.assertEquals(true)

/** Asserts that this booleans is false. If it is not, an error is thrown with a message. */		
public function boolean.assertFalse()
	this.assertEquals(false)

/** Asserts that this booleans is true. If it is not, an error is thrown. */
public function assertTrue(boolean b)
	if not b
		testFail("Assertion failed")

/** Asserts that this booleans is true. If it is not, an error is thrown with the supplied message. */
public function assertTrue(boolean b, string msg)
	if not b
		testFail("Assertion failed: " + msg)

/** Asserts that the reference t is not null */		
public function assertNotNull<T>(T t)
	if t == null
		testFail("Assertion failed: Reference was null.")
