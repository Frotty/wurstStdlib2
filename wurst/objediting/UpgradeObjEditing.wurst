package UpgradeObjEditing
import ObjEditingNatives
import NoWurst
import public SharedEnums
import Integer
import ErrorHandling

constant BASE_UPGRADE_ID = 'Rhse' // magic sentry has no default effects and level 0
constant CLEAN_UPGRADE_ID = 'RXXX'
// Prefixes
constant EFFECT_TAG_PREFIX = "gef"
constant BASE_TAG_PREFIX = "gba"
constant INCREMENT_TAG_PREFIX = "gmo"
constant CODE_TAG_PREFIX = "gco"

public enum UpgradeClass
	NONE
	Armor
	Artillery
	Melee
	Ranged
	Caster

public enum UpgradeEffectType
	NONE
	AbilityLevelBonus
	AddUltravision // Has no in-game effect.
	ApplyAttackUpgradeBonus
	ApplyDefenseUpgradeBonus
	AttackDamageBonus
	AttackDamageLoss // Has no in-game effect.
	AttackDiceBonus
	AttackRangeBonus
	AttackSpeedBonus
	AttackSpillDistanceBonus
	AttackSpillRadiusBonus
	AttackTargetCountBonus
	AuraDataBonus
	DefenseTypeChange
	EnableAttacks
	EnableAttacksRooted
	EnableAttacksUprooted
	GoldHarvestBonus
	GoldHarvestBonusEntangle
	HitPointBonus
	HitPointBonusPercent
	HitPointRegeneration
	LumberHarvestBonus
	MagicImmunity
	ManaPointBonus
	ManaPointBonusPercent
	ManaRegeneration
	MovementSpeedBonus
	MovementspeedBonusPercent
	RaiseDeadDurationBonus
	SightRangeBonus
	SpikedBarricades
	UnitAvailabilityChange

function UpgradeEffectType.toIdentifierString() returns string
	string result = ""
	switch this
		case NONE
			result = ""
		case AbilityLevelBonus
			result = "rlev"
		case AddUltravision 
			result = "rauv"
		case ApplyAttackUpgradeBonus
			result = "ratt"
		case ApplyDefenseUpgradeBonus
			result = "rarm"
		case AttackDamageBonus
			result = "ratx"
		case AttackDamageLoss 
			result = "radl"
		case AttackDiceBonus
			result = "atd"
		case AttackRangeBonus
			result = "ratr"
		case AttackSpeedBonus
			result = "rats"
		case AttackSpillDistanceBonus
			result = "rasd"
		case AttackSpillRadiusBonus
			result = "rasr"
		case AttackTargetCountBonus
			result = "atc"
		case AuraDataBonus
			result = "raud"
		case DefenseTypeChange
			result = "rart"
		case EnableAttacks
			result = "renw"
		case EnableAttacksRooted
			result = "rroo"
		case EnableAttacksUprooted
			result = "ruro"
		case GoldHarvestBonus
			result = "rmin"
		case GoldHarvestBonusEntangle
			result = "rent"
		case HitPointBonus
			result = "rhpx"
		case HitPointBonusPercent
			result = "rhpo"
		case HitPointRegeneration
			result = "rhpr"
		case LumberHarvestBonus
			result = "rlum"
		case MagicImmunity
			result = "rmim"
		case ManaPointBonus
			result = "rmnx"
		case ManaPointBonusPercent
			result = "rman"
		case ManaRegeneration
			result = "rmnr"
		case MovementSpeedBonus
			result = "rmvx"
		case MovementspeedBonusPercent
			result = "rmov"
		case RaiseDeadDurationBonus
			result = "rrai"
		case SightRangeBonus
			result = "rsig"
		case SpikedBarricades
			result = "rspi"
		case UnitAvailabilityChange
			result = "rtma"
	return result

public class W3QDefinition
	ObjectDefinition def

	protected int newId
	protected int levels = 1
	
	function getNewId() returns int
		return newId

	function getLevels() returns int
		return levels

	construct(int newId, int baseId)
		this.newId = newId
		def = createObjectDefinition("w3q", newId, baseId)

	construct(int newId, int levels, int baseId)
		this.newId = newId
		this.levels = levels
		def = createObjectDefinition("w3q", newId, baseId)

	function setButtonPositionX(int value)
		skip
		
	function setButtonPositionY(int value)
		skip

	function setAppliesToAllUnits(bool value)
		skip

	function setClass(UpgradeClass value)
		skip

	function setCostGoldBase(int value)
		skip

	function setCostGoldIncrement(int value)
		skip

	function setLevels(int value)
		skip

	function setCostLumberBase(int value)
		skip

	function setCostLumberIncrement(int value)
		skip

	function setRace(Race value)
		skip

	function setTimeBase(int value)
		skip

	function setTimeIncrement(int value)
		skip

	function setTransferWithUnitOwnership(bool value)
		skip
	
	function setIcon(int level, string value)
		skip

	/** Comma separated list of ids for tech requirements. */
	function setRequirements(int level, string value)
		skip

	/** Comma separated list of ints corresponding to list of tech requirements
		provided by setRequirements. */
	function setRequirementsLevels(int level, string value)
		skip

	function setEditorSuffix(int level, string value)
		skip

	function setHotkey(int level, string value)
		skip

	function setName(int level, string value)
		skip

	function setTooltip(int level, string value)
		skip

	function setTooltipExtended(int level, string value)
		skip
	
	function presetIcon(StringLevelClosure lc)
		skip

	/** Comma separated list of ids for tech requirements. */
	function presetRequirements(StringLevelClosure lc)
		skip

	/** Comma separated list of ints corresponding to list of tech requirements
		provided by setRequirements. */
	function presetRequirementsLevels(StringLevelClosure lc)
		skip

	function presetEditorSuffix(StringLevelClosure lc)
		skip

	function presetHotkey(StringLevelClosure lc)
		skip

	function presetName(StringLevelClosure lc)
		skip

	function presetTooltip(StringLevelClosure lc)
		skip

	function presetTooltipExtended(StringLevelClosure lc)
		skip
	
	function setEffectType(int effectIndex, UpgradeEffectType effectType)
		def.setLvlDataString(EFFECT_TAG_PREFIX + effectIndex.toString(), 0, 0, 
			effectType.toIdentifierString())

	function setEffectBase(int effectIndex, real value)
		def.setLvlDataUnreal(BASE_TAG_PREFIX + effectIndex.toString(), 0, 0, value)

	function setEffectIncrement(int effectIndex, real value)
		def.setLvlDataUnreal(INCREMENT_TAG_PREFIX + effectIndex.toString(), 0, 0, value)

	function setEffectCode(int effectIndex, string value)
		def.setLvlDataString(CODE_TAG_PREFIX + effectIndex.toString(), 0, 0, value)
	
	function setEffect(int effectIndex, UpgradeEffectType effectType, real base)
		setEffectType(effectIndex, effectType)
		setEffectBase(effectIndex, base)

	function setEffect(int effectIndex, UpgradeEffectType effectType, real base, real increment)
		setEffect(effectIndex, effectType, base)
		setEffectIncrement(effectIndex, increment)

	function setEffect(int effectIndex, UpgradeEffectType effectType, real base, real increment, string codeId)
		setEffect(effectIndex, effectType, base, increment)
		setEffectCode(effectIndex, codeId)

/** Use this class to create upgrade definitions. Constructors provide a "Clean"
	upgrade definition, without any research cost or effects. Using the 
	addEffectXXX() methods will add additional effects, with a limit of 4 
	effects. Do not use the setEffect methods from the W3Q baseclass. */
public class UpgradeDefinition extends W3QDefinition
	int effectCount = 0

	private function addNewEffectCount() returns int
		effectCount += 1
		if effectCount > 4
			error("Upgrades cannot have more than 4 effects!")
		return effectCount
			
	function getEffectCount() returns int
		return effectCount

	construct(int newId)
		super(newId, CLEAN_UPGRADE_ID)

	construct(int newId, int levels)
		super(newId, levels, CLEAN_UPGRADE_ID)
	
	
	/** Increases the level of an ability */
	function addEffectAbilityLevelBonus(int base, int increment, string abilCode)
		super.setEffect(addNewEffectCount(), UpgradeEffectType.AbilityLevelBonus, base, increment, abilCode)

	// This is commented out because it does nothing when used. Look at the Ultravision
	// ability 'Ault' to see how Blizzard implements this.
	// function addEffectAddUltravision()
	// 	skip

	/** Increases the base damage of units by their "Attack Upgrade Bonus" field */
	function addEffectApplyAttackUpgradeBonus()
		super.setEffectType(addNewEffectCount(), UpgradeEffectType.ApplyAttackUpgradeBonus)

	/** Increases the defense of units by their "Defense Upgrade Bonus" field */
	function addEffectApplyDefenseUpgradeBonus()
		super.setEffectType(addNewEffectCount(), UpgradeEffectType.ApplyDefenseUpgradeBonus)

	/** Bonus to base damage of attacks. Supports negative bonuses. */
	function addEffectAttackDamageBonus(int base, int increment)
		super.setEffect(addNewEffectCount(), UpgradeEffectType.)
	
	// This doesn't do anything. Use DamageBonus with negative numbers
	// function addEffectAttackDamageLoss(int base, int increment)
	// 	skip

	/** Increases the number of Attack Dice on attacks */
	function addEffectAttackDiceBonus(int base, int increment)
		skip

	/** Increases the attack range of attacks */
	function addEffectAttackRangeBonus(int base, int increment)
		skip

	/** Percentage increase on attack speed. Note: 0.1 = 10%. */
	function addEffectAttackSpeedBonus(real base, real increment)
		skip

	/** Upgrades the distance "Artillery (Line)" attack types travel. For example
		Glaive Throwers use this. */
	function addEffectAttackSpillDistanceBonus(int base, int increment)
		skip

	/** Upgrades the radius of "Artillery (Line)" attack types (over the distance
		they travel). */
	function addEffectAttackSpillRadiusBonus(int base, int increment)
		skip

	/** Increases the number of attack targets */
	function addEffectAttackTargetCountBonus(int base, int increment)
		skip

	/** This is used to increase the damage of Kodo's command auras in melee. Use
		at your own risk on other auras. */
	function addEffectAuraDataBonus(real base, real increment)
		skip

	/** Changes the effected units' armor type by *adding or removing this value 
		from their current armor type*.The following table describes the index
		for each armor type:
			small = 0
			medium = 1
			large = 2
			fortified = 3
			normal = 4
			hero = 5
			divine = 6
			unarmored = 7
		
		Resulting armor type indexes under 0 or greater than 7 will result in 
		broken unit armors. 

		Examples. Unit has "Large" armor. You upgrade a type change of 1, the unit 
		now has fortified armor (this is what Orc Reinforced Burrows does). Having
		an armor type of large and applying 7 to it will give the unit an undefined,
		breaking their armor type.
	*/
	function addEffectDefenseTypeChange(int base)
		skip

	/** 0 = none, 1 = attack 1 only, 2 = attack 2 only, 3 = both*/
	function addEffectEnableAttacks(int base)
		skip
	
	/** 0 = none, 1 = attack 1 only, 2 = attack 2 only, 3 = both*/
	function addEffectEnableAttacksRooted(int base)
		skip
	
	/** 0 = none, 1 = attack 1 only, 2 = attack 2 only, 3 = both*/
	function addEffectEnableAttacksUprooted(int base)
		skip

	/** Increases gold harvested by Harvest abilities. */
	function addEffectGoldHarvestBonus(int base, int increment)
		skip

	/** Increases gold harvested by Gold Harvest Entangled abilities. Apply to the
		entangled mine. */
	function addEffectGoldHarvestBonusEntangle(int base, int increment)
		skip

	/** Flat increase to hitpoints. */
	function addEffectHitPointBonus(int base, int increment)
		skip
	
	/** Percent increase to base hitpoints. Note: 0.1 = 10% increase */
	function addEffectHitPointBonusPercent(real base, real increment)
		skip

	/** Percent bonus increase to hitpoint regeneration. Note: 0.1 = 10% increase */
	function addEffectHitPointRegeneration(real base, real increment)
		skip

	/** Increases lumber capcity on "gather" type abilities. */
	function addEffectLumberHarvestBonus(int base, int increment)
		skip
	
	/** Adds magic immunity to unit's effected */
	function addEffectMagicImmunity()
		skip

	/** Flat bonus to max mana points. */
	function addEffectManaPointBonus(int base, int increment)
		skip
	
	/** Percent bonus to max mana. Note: 0.1 = 10%. */
	function addEffectManaPointBonusPercent(real base, real increment)
		skip
	
	/** Percent bonus to mana regeneration. Note: 0.1 = 10%. */
	function addEffectManaRegeneration(real base, real increment)
		skip

	/** Flat bonus to movement speed. */
	function addEffectMovementSpeedBonus(int base, int increment)
		skip

	/** Percent bonus to base movement speed. Note: 0.1 = 10%. */
	function addEffectMovementSpeedBonusPercent(real base, real increment)
		skip

	/** Increases the lifetime of skeletons raised via the Raise Dead ability. */
	function addEffectRaiseDeadDurationBonus(int base, int increment)
		skip

	/** Increases sight range of units effected. */
	function addEffectSightRangeBonus(int base, int increment)
		skip

	/** Damage dealt to melee attackers on attack. */
	function addEffectSpikedBarricades(int base, int increment)
		skip
	
	/** Changes availabilty of units. Note: the unit MUST have this upgrade as 
		an "Upgrade Used" or it will have no effect. */
	function addEffectUnitAvailabilityChange(bool available, string unitId)
		skip



// This is a "clean" defition from which all others are created
@compiletime function genCleanUpgrade()
	createObjectDefinition("w3q", CLEAN_UPGRADE_ID, BASE_UPGRADE_ID)
		..setLvlDataString("gnam", 1, 0, "")
		..setLvlDataString("gtp1", 1, 0, "")
		..setLvlDataString("gub1", 1, 0, "")
		..setLvlDataString("ghk1", 1, 0, "")
		..setLvlDataInt("gbpy", 0, 0, 0)
		..setLvlDataInt("gbpx", 0, 0, 0)
		..setLvlDataInt("gglb", 0, 0, 0)
		..setLvlDataInt("glmb", 0, 0, 0)
