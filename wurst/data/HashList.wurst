package HashList

public class HashList<T>
	private static hashtable ht = InitHashtable()
	private int size = 0

	private function incrOccurences(T elem)
		let occurences = ht.loadReal(this castTo int, elem castTo int)
		ht.saveReal(this castTo int, elem castTo int, occurences + 1)

	private function decrOccurences(T elem)
		let occurences = ht.loadReal(this castTo int, elem castTo int)
		ht.saveReal(this castTo int, elem castTo int, occurences - 1)

	/** Add an element to the end of the list */
	function add(T elem)
		ht.saveInt(this castTo int, size, elem castTo int)
		incrOccurences(elem)
		size++
	
	/** Set an existing element at the given position to a new value */
	function set(int index, T elem)
		decrOccurences(get(index))
		ht.saveInt(this castTo int, index, elem castTo int)
		incrOccurences(elem)

	/** Add all elements from elems to this list */
	function addAll(HashList<T> elems)
		for T elem in elems
			add(elem)
	
	/** Remove all elements from this list without destroying it */
	function clear()
		ht.flushChild(this castTo int)
		size = 0

	/** Remove all elements from this list without destroying it */
	function removeAll()
		clear()

	/** Remove the element at the given index */
	function removeAt(int index)
		decrOccurences(ht.loadInt(this castTo int, index) castTo T)
		for i = index to size
			ht.saveInt(this castTo int, i, ht.loadInt(this castTo int, i + 1))
		size--
		
	/** Remove the first occurence of t from this list */
	function remove(T t)
		for i = 0 to size-1
			if t castTo int == ht.loadInt(this castTo int, i)
				removeAt(i)
				break

	/** Get the size of the list */
	function getSize() returns int
		return size

	/** Return whether the list is empty */
	function isEmpty() returns bool
		return size == 0

	/** Get the element at the given index from this list */
	function get(int index) returns T
		return ht.loadInt(this castTo int, index) castTo T

	/** Return whether the element exists in the list */
	function contains(T elem) returns bool
		return ht.loadReal(this castTo int, elem castTo int) > 0

	/** Get an iterator for this list */
	function iterator() returns HLIterator<T>
		return new HLIterator(this)	
				
	/** Returns a shallow copy of this map */
	function copy() returns HashList<T>
		let list = new HashList<T>
		for elem in this
			list.add(elem)
		return list

	construct()
	
	/** Create a new list by copying all elements from another list into it */
	construct(thistype base)
		for elem in base
			add(elem)

	ondestroy
		ht.flushChild(this castTo int)

public class HLIterator<Q>
	protected int i = 0
	protected HashList<Q> list
	
	construct(HashList<Q> list)
		this.list = list
		
	function hasNext() returns boolean
		return i < list.getSize()
		
	function remove()
		

	function next() returns Q
		i++
		return list.get(i-1)

	function close()
		destroy this


@Test function testHashList()
	let hlist = new HashList<int>()
	hlist..add(1)..add(2)..add(3)..add(4)

	assertTrue(hlist.get(2) == 3)

	hlist.clear()

	assertTrue(hlist.getSize() == 0)
