package Base64StringBuffer

import StringBuffer
import Base64
import StringUtils
import ByteBuffer
import BigString

/**
    This is a StringBuffer using the Base64 encoder as the backing for it's
    serialization strategy.
    
    It is much more compact and performant than the old `OrderedStringBuffer`

    Some caveats:
        Booleans are encoded as a single byte. If you are using many booleans in your
        serialization, it may be beneficial to use a `bitset` instead and serialize it
        as an integer.

        Reals cannot be directly converted to their bitwise representation in WC3, so
        we save them as a pair of a 4-byte int for the integer part, and a 2-byte short
        for the fractional part, consuming 6 bytes in total. This should be sufficient
        for most scenarios, but if you need more precision, you can implement your own
        method as an extension function over this.
**/
public class Base64StringBuffer extends AbstractStringChunkedBuffer
    private Base64Encoder encoder
    private Base64Decoder decoder
    private ByteBuffer byteBuffer
    private BigString stringBuffer

    construct(int maxBufferSize)
        this.encoder = new Base64Encoder(maxBufferSize)
        this.decoder = new Base64Decoder

    ondestroy
        if encoder != null
            destroy encoder

        if decoder != null
            destroy decoder

        if byteBuffer != null
            destroy byteBuffer

        if stringBuffer != null
            destroy stringBuffer

    /** Decode flow only **/
    override function pushChunk(string chunk)
        decoder.pushChunk(chunk)

    /** Encode flow only **/
    override function hasChunk() returns boolean
        return encoder.hasChunk()

    /** Encode flow only **/
    override function popChunk() returns string
        return encoder.popChunk()

    /** Encode flow only **/
    override function encode()
        encoder.encode()
        stringBuffer = encoder.intoData()
        encoder = null
    
    /** Decode flow only **/
    override function decode()
        decoder.decode()
        byteBuffer = decoder.intoData()
        decoder = null

    /** Decode flow only **/
    override function intoBigString() returns BigString
        let temp = stringBuffer
        stringBuffer = null
        destroy this
        return temp

    override function readInt() returns int
        return byteBuffer.readInt()

    override function readShort() returns int
        return byteBuffer.readShort()

    override function readByte() returns int
        return byteBuffer.readByte()

    override function readBoolean() returns boolean
        return byteBuffer.readByte().toBool()

    override function readReal() returns real
        let number = byteBuffer.readInt()
        let fractional = 1 / byteBuffer.readShort()
        return number + fractional

    override function readString() returns string
        let length = byteBuffer.readShort()
        var value = ""
        for i = 1 to length
            value += byteBuffer.readByte().toChar().toString()
        return value

    override function writeInt(int value)
        encoder.pushInt(value)

    override function writeShort(int value)
        encoder.pushShort(value)

    override function writeByte(int value)
        encoder.pushByte(value)

    override function writeString(string value)
        encoder.pushShort(value.length())

        for i = 0 to value.length() - 1
            encoder.pushByte(value.charAt(i).toChar().toInt())

    override function writeReal(real value)
        let number = value.toInt()
        let fractional = (1 / (value % 1)).toInt().clamp(0, 0xFFFF)
        encoder.pushInt(number)
        encoder.pushShort(fractional)

    override function writeBoolean(boolean value)
        encoder.pushByte(value.toInt())

    override function clear()