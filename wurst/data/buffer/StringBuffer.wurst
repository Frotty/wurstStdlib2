package StringBuffer

import ErrorHandling
import LinkedList
import BufferInterface
import SafetyChecks
import BigString

/**
	This is an abstract class providing an interface to reading/writing chunked
	string data.

    Typical decode flow:
        1. Create an instance of an implementing class.
        2. Push encoded strings using `pushChunk()`
        3. Call `decode()` This will prepare the class for reading.
        4. Use the `read` methods to extract data.

    Typical encode flow:
        1. Create an instance of an implementing class.
        2. Write data using `write` methods.
        3. Call `encode()` This will prepare the class for exctracting chunks.
		4.a Use `popChunk()` and `hasChunk()` to extract encoded strings.
		4.b Alternatively, you can use `intoBigString()` to extract a BigString object.
**/
public abstract class AbstractStringChunkedBuffer extends AbstractBuffer
	abstract function pushChunk(string chunk)
	abstract function hasChunk() returns boolean
	abstract function popChunk() returns string
	function encode()
	function decode()

	function intoBigString() returns BigString
		let elementList = new LinkedList<BigStringElement>

		while hasChunk()
			elementList.push(new BigStringElement(popChunk()))

		return new BigString(elementList, BIGSTRING_MAX_CHUNK_LENGTH)