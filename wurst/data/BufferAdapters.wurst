package BufferAdapters

import Buffer
import Execute
import MultifileIO

function StringBuffer.transferValueTo(HashBuffer sink)
	let valueType = this.peekType()

	switch valueType
		case INTEGER
			sink.writeInt(this.readInt())
		case REAL
			sink.writeReal(this.readReal())
		case STRING
			sink.writeString(this.readString())
		case BOOLEAN
			sink.writeBoolean(this.readBoolean())
		default

public function StringBuffer.transfer(HashBuffer sink)
	executeWhile(64, () -> this.canRead()) ->
		this.transferValueTo(sink)

public function StringBuffer.populateFromFile(FileReader reader)
	executeWhile(64, () -> reader.canRead()) ->
		this.writeChunk(reader.readLine())

public function FileWriter.populateFromBuffer(StringBuffer buffer)
	executeWhile(64, () -> buffer.hasChunk()) ->
		this.writeLine(buffer.readChunk())
