package DamageEvent

import ClosureEvents
import UnitIndexer


/* CONFIGURATION */

@configurable constant DETECT_NATIVE_ABILITIES = false

@configurable public constant DAMAGE_ELEMENT_PHYSICAL = new DamageElement("Physical")


/* DAMAGE TYPE */

enum DamageType
    UNKNOWN
    PHYSICAL        //from auto attacks 
    NATIVE_ABILITY    //from native spells 
    CODE            //from user code 


/* DAMAGE ELEMENT */

public class DamageElement 
    protected string name 
    
    construct(string name)
        this.name = name 

    function getName() returns string 
        return name 


/* DAMAGE INSTANCE */

class DamageInstance 
    protected int id 
    protected unit source 
    protected unit target 
    protected real originalAmount 

    protected real amount 
    protected DamageType damageType 
    protected DamageElement damageElement

    protected static thistype current = null 
    protected static thistype array stack
    protected static int count = 0 

    construct(int id, unit source, unit target, real amount, DamageType damageType, DamageElement damageElement)
        this.id = id 
        this.source = source 
        this.target = target 
        this.amount = amount 
        this.damageType = damageType
        this.damageElement = damageElement

        count++ 
        stack[count] = this 
        current = this 

    ondestroy
        count-- 
        current = stack[count]


/* DAMAGE EVENT */

public class DamageEvent 

    protected static int nextDamageId = 0 
    protected static DamageType nextDamageType = UNKNOWN 
    protected static DamageElement nextDamageElement = null 

    /* ON DAMAGE */
    protected static function onDamage()
        if DETECT_NATIVE_ABILITIES 
            //Runed brances shit that I don't want to add because fuck using native spells, just code your shit m8

        else 
            //damage type isn't defined then it's not code damage 
            if nextDamageType == DamageType.UNKNOWN 
                nextDamageType = PHYSICAL
                nextDamageElement = DAMAGE_ELEMENT_PHYSICAL 

        let dmg = new DamageInstance(nextDamageId, GetEventDamageSource(), GetTriggerUnit(), GetEventDamage(), nextDamageType, nextDamageElement)

        nextDamageId = 0 
        nextDamageType = UNKNOWN
        nextDamageElement = null

        //fire listener 

        if dmg.amount != dmg.originalAmount
            BlzSetEventDamage(dmg.amount)

        destroy dmg 


    /* GETTERS */ 
    static function getId() returns int  
        return DamageInstance.current.id 

    static function getSource() returns unit 
        return DamageInstance.current.source

    static function getTarget() returns unit 
        return DamageInstance.current.target

    static function getAmount() returns real 
        return DamageInstance.current.amount

    static function getOriginalAmount() returns real 
        return DamageInstance.current.originalAmount

    static function getType() returns DamageType 
        return DamageInstance.current.damageType

    static function getElement() returns DamageElement 
        return DamageInstance.current.damageElement

    static function isFiring() returns bool 
        return DamageInstance.count > 0

    /* SETTERS */

    static function setAmount(real amount) 
        DamageInstance.current.amount = amount

    static function setNextDamageId(int id)
        nextDamageId = id 

    static function setNextDamageType(DamageType damageType)
        nextDamageType = damageType 

    static function setNextDamageElement(DamageElement damageElement)
        nextDamageElement = damageElement


/* MISC */

@configurable public function getDamageTypeName(DamageType t) returns string 
    switch t 
        case PHYSICAL
            return "Physical"
        case NATIVE_ABILITY
            return "Ability"
        case CODE
            return "Ability"
        default 
            return "Unknown"

@configurable public function getDamageDesignation(DamageType t, DamageElement e) returns string 
    if t != DamageType.UNKNOWN and e != null
        if t==DamageType.PHYSICAL and e==DAMAGE_ELEMENT_PHYSICAL
            return "Pure Physical Damage"
        return e.getName() + " " + getDamageTypeName(t) + " Damage"
    else if t != DamageType.UNKNOWN
        return getDamageTypeName(t) + " Damage"
    else if e != null 
        return e.getName() + " Damage"
    return "Damage"


/* INIT */

init 
    onUnitIndex() -> 
        EventListener.add(getIndexingUnit(),EVENT_UNIT_DAMAGED, () -> DamageEvent.onDamage())

       