package DamageDetection
import OnUnitEnterLeave

constant SWAP_TIMEOUT = 600.

boolexpr array func
int funcNext = 0
trigger current = null
trigger toDestroy = null

constant filter = Filter(() -> addUnit(GetFilterUnit()))

function addUnit(unit u)
	current.registerUnitEvent(u, EVENT_UNIT_DAMAGED)

/** Add a Condition(Action) to the damage Event. */
public function addOnDamageFunc(boolexpr cf)
	current.addCondition(cf)
	func[funcNext] = cf
	funcNext++

/** Disables the damage events */
public function disableDamageDetect()
	DisableTrigger(current)

/** Enables the damage events */
public function enableDamageDetect()
	EnableTrigger(current)

/** Periodic Cleanup-Function */
function swap()
	var isEnabled = IsTriggerEnabled(current)

	current.disable()
	if toDestroy != null
		toDestroy.destr()

	toDestroy = current
	current = CreateTrigger()

	if not isEnabled
		current.disable()

	for i = 0 to bj_MAX_PLAYER_SLOTS - 1
		GroupEnumUnitsOfPlayer(ENUM_GROUP, players[i], filter)

	for i = 0 to funcNext-1
		current.addCondition(func[i])

init
	current = CreateTrigger()
	for i = 0 to funcNext-1
		current.addCondition(func[i])

	onEnter(() -> addUnit(getEnterLeaveUnit()))
	CreateTimer().startPeriodic(SWAP_TIMEOUT, function swap)