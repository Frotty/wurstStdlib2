package OnUnitEnterLeave
import MapBounds
import NoWurst
import Unit
import Trigger
import Group
import Player
import ClosureTimers
import AbilityObjEditing
import RegisterEvents
import ObjectIdGenerator
import MagicFunctions

/* 	Provides event API for units entering and leaving the map.
	The event will also fire for preplaced units on the map. */

/* @API */

/** Returns the unit that caused the enter/leave event to happen */
public function getEnterLeaveUnit() returns unit
	return tempUnit

/** Adds a callback that is run when a unit enters the map */
public function onEnter(code c)
	eventTrigger.addCondition(Filter(c))

/** Adds a callback that is run when a unit leaves the map */
public function onLeave(code c)
	eventTrigger.addAction(c)


/* === Internals === */

constant eventTrigger = CreateTrigger()
unit tempUnit = null

init
	CreateTrigger()..registerEnterRegion(boundRegion, Filter(() -> begin
		tempUnit = GetFilterUnit()..addAbility(ABILITY_ID)..makeAbilityPermanent(ABILITY_ID, true)
		eventTrigger.evaluate()
		tempUnit = null
	end))

	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER, () -> begin
		let leavingUnit = GetTriggerUnit()
		if leavingUnit.getAbilityLevel(ABILITY_ID) == 0
			tempUnit = leavingUnit
			eventTrigger.execute()
			tempUnit = null
	end)
	for i = 0 to bj_MAX_PLAYER_SLOTS-1
		players[i].setAbilityAvailable(ABILITY_ID, false)

	GroupEnumUnitsInRect(ENUM_GROUP, boundRect, null)
	nullTimer(() -> begin
		for u from ENUM_GROUP
			if u == null
				break
			u..addAbility(ABILITY_ID)..makeAbilityPermanent(ABILITY_ID, true)
			eventTrigger.evaluate()
	end)

constant ABILITY_ID = compiletime(ABIL_ID_GEN.next())

@compiletime function generateAbility()
	new AbilityDefinitionDefend(ABILITY_ID)
	..setName("Leave Detect")
	..setEditorSuffix("(OnUnitEnterLeave)")
	..setArtCaster("")
	..setRequirements("")
	..setRace(Race.Unknown)
	..setButtonPositionNormalX(0)
	..setButtonPositionNormalY(-11)
	..setButtonPositionTurnOffX(0)
	..setButtonPositionTurnOffY(-11)
