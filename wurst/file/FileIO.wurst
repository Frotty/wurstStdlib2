package FileIO
import public ChunkedString
import AbilityIds
import ErrorHandling

/* 	FileIO for Patches 1.31 and up with chunked string support for big data.
	Reads and writes using preload files by manipulating default ability tooltips.

	Read a file:
	>	let fileContent = new File("MyFileName.pld").readAsString()

	Write a file:
	>	new File("MyFileName.pld")..write("MyContent")..close()
*/

/** Abilities which tooltips will be used to load data */
@configurable constant IO_ABILITIES = [AbilityIds.aerialShackles, AbilityIds.rocketAttack, AbilityIds.callToArms,
						AbilityIds.calltoArms, AbilityIds.cloudofFog, AbilityIds.controlMagic,
						AbilityIds.defend, AbilityIds.dispelMagic, AbilityIds.feedbackArcaneTower,
						AbilityIds.feedback]

public var CAN_READ_FILES = true

public class File
	var filename = ""

	construct(string filename)
		this.filename = filename

	function write(player p, string content)
		let buffer = new ChunkedString()
		buffer.append(content)
		write(p, buffer)
		destroy buffer

	function write(player p, ChunkedString buffer)
		for i = 0 to buffer.chunkCount
			let str = buffer.getChunk(i)
			if validateInput(str) != null
				error("FileIO(" + filename + ") ERROR: Invalid character |cffffcc00" + validateInput(str) + "|r")

		writePreload(p, buffer)

	function close()
		destroy this

	function read(player p) returns ChunkedString
		let out = new ChunkedString(DEFAULT_CHUNK_SIZE)
		if localPlayer == p
			readPreload(out)
		return out

	function readAsString(player p) returns string
		let out = new ChunkedString(DEFAULT_CHUNK_SIZE)
		if localPlayer == p
			readPreload(out)
		return out.readChunk()

	private function writePreload(player p, ChunkedString buffer)
		if localPlayer == p
			PreloadGenClear()
			PreloadGenStart()

			for i = 0 to buffer.chunkCount
				if (i >= IO_ABILITIES.length)
					error("FileIO(" + filename + ") ERROR: String exceeds max length (" + I2S(IO_ABILITIES.length * buffer.chunkSize) + ").|r")

				let chunk = buffer.getChunk(i)
				Preload("\" )\ncall BlzSetAbilityTooltip(" + IO_ABILITIES[i].toString() + ", \"" + chunk + "\", 0)\n//")

			Preload("\" )\nendfunction\nfunction a takes nothing returns nothing\n //")
			PreloadGenEnd(this.filename)

	private function readPreload(ChunkedString output)
		string array original

		for i = 0 to IO_ABILITIES.length - 1
			original[i] = BlzGetAbilityTooltip(IO_ABILITIES[i], 0)

		// Execute the preload file
		Preloader(this.filename)

		// Read the output
		for i = 0 to IO_ABILITIES.length - 1
			// Make sure the tooltip has changed
			var chunk = BlzGetAbilityTooltip(IO_ABILITIES[i], 0)

			if chunk == original[i]
				break

			// Restore the tooltip and append the chunk
			BlzSetAbilityTooltip(IO_ABILITIES[i], original[i], 0)
			output.append(chunk)


	private static function validateInput(string content) returns string
		for char in content
			if (char == "\\")
				return char
			else if (char == "\"")
				return char
		return null

init
	CAN_READ_FILES = new File("FileTester.pld")..write(localPlayer, "test").readAsString(localPlayer) == "test"
