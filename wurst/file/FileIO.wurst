package FileIO
import NoWurst
import ErrorHandling
import ClosureTimers
import HashMap

import Player

/* Credits Nestharus */
	//Tests if the player can read files

class LocalFileTest
	private static constant FLAG_FILE = "flag.pld"
		
	static boolean success = false
		
	private static function testForLocalEnabled(string prepend)
		string playerName = GetPlayerName(GetLocalPlayer())
		
		Preloader(prepend+FLAG_FILE)
		
		success = GetPlayerName(GetLocalPlayer()) != playerName
		SetPlayerName(GetLocalPlayer(), playerName)
		
	static function writeLocalFileTest()
		PreloadGenClear()
		PreloadGenStart()
		Preload("\")\r\n\tcall SetPlayerName(GetLocalPlayer(), \"LocalFileTest\")\r\n//")
		Preload("\" )\r\nendfunction\r\nfunction AAA takes nothing returns nothing \r\n//")
		PreloadGenEnd(FLAG_FILE)
		
	static function doTest()
		writeLocalFileTest()
		testForLocalEnabled("")
		if not success
			testForLocalEnabled("Logs\\")

	
public enum Mode
	READ
	WRITE
	
public constant MAX_LINE_LENGTH = 209//max amount of data per line

public class File
	private HashMap<int, string> stringMap = new HashMap<int, string>() //stores lines from file, 16 lines per file
		
	private string fileName
		
	private string data	= ""									 //data buffer
		
	private int dataIndex									   //current data index for file, 0-15
		
	private Mode mode											//read/write Mode
		
	static function isEnabled() returns boolean
		return LocalFileTest.success

	static function open(string fileName, Mode mode ) returns File
		let file = new File()	
		
		file.fileName = fileName
		
		file.mode = mode
		
		file.endPos = -1
		
		if (mode == Mode.READ)
			//if reading, go to previous file index so that the reader can auto load up the file
			file.dataIndex = 16
		else if (mode == Mode.WRITE)
			//open file for writing
			PreloadGenClear()
			PreloadGenStart()

		return file

		
	//loads file and returns lines out of file
	private static string array playerNames
	private int endPos
	
	private function loadLine()
		//if there are no more lines in the file, load next file
		if (16 == dataIndex)
			dataIndex = 0
			
			//store current player names
			for i = 15 downto 0
				playerNames[i] = players[i].getName()

			//load file (sets the player names to lines in file)
			Preloader(fileName)
			//flush file buffer
			stringMap.flush()
			//load lines from file to file buffer and return player names to normal
			for i = 15 downto 0
				if (playerNames[i] != players[i].getName())
					let str = players[i].getName().substring(1, players[i].getName().length())
					stringMap.put(i, str)
					// Restore name
					players[i].setName(playerNames[i])
				else if (endPos == -1)
					endPos = i
		
		//add next line of file to data
		this.data = this.data + stringMap.get(dataIndex)
		dataIndex++

	/** Returns the next chunk of data from the file.
		Returns null when the end of file is reached. */
	function read() returns string
		int length
		string data = ""
		if (endPos == dataIndex)
			return null
		if (mode != Mode.READ)
			error("FILE IO ERROR: ATTEMPT TO READ TO FILE OPEN FOR WRITING")

		//if there is no data at the moment, get next line from file
		if (StringLength(this.data) < 4)
			loadLine()
			
			//if there is no next line, return null
			if (StringLength(this.data) < 4)
				return null

		//get the length of the data (# of characters that make it up)
		length = S2I(SubString(this.data, 0, 4))
		this.data = SubString(this.data, 4, StringLength(this.data))
		while true
			if (length > StringLength(this.data))
				//if the length is greater than the data currently in the buffer, dump the
				//entire buffer to the data being returned and get the next line
				length = length - StringLength(this.data)
				data = data + this.data
				this.data = ""
				loadLine()
			else
				//if the length is less than the data in the buffer, dump that data
				//from the buffer
				data = data + SubString(this.data, 0, length)
				this.data = SubString(this.data, length, StringLength(this.data))
				return data

		return null
		
	function write( string data )
		int length = StringLength(data)
		int digits = 0
		boolean done = false
		
		if (mode != Mode.WRITE)
			error("FILE IO ERROR: ATTEMPT TO WRITE TO FILE OPEN FOR READING")
		
		//first, retrieve the # of digits for the length
		while length > 0
			digits++
			length = length div 10
		
		//add the extra digits to and length to buffer
		this.data = this.data + extra0[digits] + I2S(StringLength(data))
		
		while not done
			if (StringLength(data) > 400)
				//if the length of the data is greater than 400, throw first 400 chars into buffer
				this.data = this.data + SubString(data, 0, 400)
				this.data = SubString(data, 400, StringLength(data))
			else
				//if the length isn't greater than 400, throw it all into the buffer
				this.data = this.data + data
				done = true

			
			while StringLength(this.data) >= MAX_LINE_LENGTH
				//throw the data into file in sets of MAX_LINE_LENGTH chars until there is not
				//enough data in the buffer to completely fill a line
				Preload("\")\r\n\tcall SetPlayerName(Player("+I2S(dataIndex)+"), \" "+SubString(this.data, 0, MAX_LINE_LENGTH)+"\")\r\n//")
				this.data = SubString(this.data, MAX_LINE_LENGTH, StringLength(this.data))
				
				dataIndex = dataIndex + 1
				if (dataIndex == 16)
					//start a new file
					
					dataIndex = 0
					
					Preload( "\" )\r\nendfunction\r\nfunction AAA takes nothing returns nothing \r\n//")
					PreloadGenEnd(fileName)
					
					PreloadGenClear()
					PreloadGenStart()

		
	function close()
		if (mode == Mode.READ)
			//flush the read buffer
			destroy stringMap
		else if (mode == Mode.WRITE)
			//write remaining of data to file and close it out
			Preload("\")\r\n\tcall SetPlayerName(Player("+I2S(dataIndex)+"), \" "+data+"\")\r\n//")
			Preload( "\" )\r\nendfunction\r\nfunction AAA takes nothing returns nothing \r\n//")
			PreloadGenEnd(fileName)

		
		//deallocate and reset
		destroy this
		
		dataIndex = 0
		data = ""
		
string array extra0	
init
	extra0[1] = "000"
	extra0[2] = "00"
	extra0[3] = "0"
	extra0[4] = ""
	nullTimer(() -> LocalFileTest.doTest())

