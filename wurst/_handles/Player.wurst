package Player
import NoWurst
import Colors
import Unit

/** Use this array instead of Player() to avoid leaks */
public player array players
public player localPlayer
init
	for i = 0 to bj_MAX_PLAYER_SLOTS-1
		players[i] = Player(i)
	localPlayer = GetLocalPlayer()

public function player.setGold(int val)
	this.setState(PLAYER_STATE_RESOURCE_GOLD, val)

public function player.addGold(int val)
	this.addState(PLAYER_STATE_RESOURCE_GOLD, val)

public function player.setLumber(int val)
	this.setState(PLAYER_STATE_RESOURCE_LUMBER, val)

public function player.addLumber(int val)
	this.addState(PLAYER_STATE_RESOURCE_LUMBER, val)

public function player.addState(playerstate state, int val)
	SetPlayerState(this, state, this.getState(state) + val)

public function player.getColor() returns playercolor
	return GetPlayerColor(this)

public function player.getController() returns mapcontrol
	return GetPlayerController(this)

public function player.getCurrentSupply() returns int
	return this.getState(PLAYER_STATE_RESOURCE_FOOD_USED)

public function player.getGold() returns int
	return this.getState(PLAYER_STATE_RESOURCE_GOLD)

public function player.getId() returns int
	return GetPlayerId(this)

public function player.getLumber() returns int
	return this.getState(PLAYER_STATE_RESOURCE_LUMBER)

public function player.getMaxSupply() returns int
	return this.getState(PLAYER_STATE_RESOURCE_FOOD_CAP)

public function player.getName() returns string
	return GetPlayerName(this)

public function player.getNameColored() returns string
	return playercolors[this.getId()].toColorString() + GetPlayerName(this) + "|r"

public function player.getSlotState() returns playerslotstate
	return GetPlayerSlotState(this)

public function player.getStartLocation() returns vec2
	return vec2(GetPlayerStartLocationX(this), GetPlayerStartLocationY(this))

public function player.getState(playerstate state) returns int
	return GetPlayerState(this, state)

public function player.isAllyOf(player p) returns boolean
	return IsPlayerAlly(this, p)

public function player.isEnemyOf(player p) returns boolean
	return IsPlayerEnemy(this, p)

public function player.panCamToTimed(unit u, real time)
	if localPlayer == this
		PanCameraToTimed(u.getX(), u.getY(), time)

public function player.select(unit u)
	if localPlayer == this
		SelectUnit(u, true)

public function player.selectSingle(unit u)
	if localPlayer == this
		ClearSelection()
		SelectUnit(u, true)

public function player.setAbilityAvailable(integer abilityId, boolean avail)
	SetPlayerAbilityAvailable(this, abilityId, avail)

public function player.setName(string name)
	SetPlayerName(this, name)
	
public function player.setState(playerstate state, int val)
	SetPlayerState(this, state, val)

public function player.subGold(int val)
	this.subState(PLAYER_STATE_RESOURCE_GOLD, val)

public function player.subState(playerstate state, int val)
	SetPlayerState(this, state, this.getState(state) - val)

public function player.unselect(unit u)
	if localPlayer == this
		SelectUnit(u, false)

public function player.isIngame() returns boolean
	return this.getSlotState() == PLAYER_SLOT_STATE_PLAYING and this.getController() == MAP_CONTROL_USER