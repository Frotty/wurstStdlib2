package Player
import NoWurst
import Wurstunit
import Unit
import Annotations

/** Use this array instead of Player() to avoid leaks */
public player array players
public constant localPlayer = GetLocalPlayer()
init
	initPlayerArray()

@compiletime function initPlayerArray()
	for i = 0 to bj_MAX_PLAYER_SLOTS - 1
		players[i] = Player(i)

public function player.setGold(int val)
	this.setState(PLAYER_STATE_RESOURCE_GOLD, val)

public function player.addGold(int val)
	this.addState(PLAYER_STATE_RESOURCE_GOLD, val)

public function player.setLumber(int val)
	this.setState(PLAYER_STATE_RESOURCE_LUMBER, val)

public function player.addLumber(int val)
	this.addState(PLAYER_STATE_RESOURCE_LUMBER, val)

public function player.addState(playerstate state, int val)
	SetPlayerState(this, state, this.getState(state) + val)

/** Clears the selection for the player, deselecting all
	widgets. */
public function player.clearSelection()
	if localPlayer == this
		ClearSelection()

/** Disable UI control for the player */
public function player.disableUserControl()
	this.setUserControl(false)

/** Enable UI control for the player */
public function player.enableUserControl()
	this.setUserControl(true)

public function player.getController() returns mapcontrol
	return GetPlayerController(this)

public function player.getCurrentSupply() returns int
	return this.getState(PLAYER_STATE_RESOURCE_FOOD_USED)

public function player.getGold() returns int
	return this.getState(PLAYER_STATE_RESOURCE_GOLD)

public function player.getId() returns int
	return GetPlayerId(this)

public function player.getLumber() returns int
	return this.getState(PLAYER_STATE_RESOURCE_LUMBER)

public function player.getMaxSupply() returns int
	return this.getState(PLAYER_STATE_RESOURCE_FOOD_CAP)

public function player.getName() returns string
	return GetPlayerName(this)

public function player.getSlotState() returns playerslotstate
	return GetPlayerSlotState(this)

public function player.getStartLocation() returns vec2
	return vec2(GetPlayerStartLocationX(this), GetPlayerStartLocationY(this))

public function player.getState(playerstate state) returns int
	return GetPlayerState(this, state)

public function player.isAllyOf(player p) returns boolean
	return IsPlayerAlly(this, p)

public function player.isEnemyOf(player p) returns boolean
	return IsPlayerEnemy(this, p)

public function player.panCamToTimed(unit u, real time)
	if localPlayer == this
		PanCameraToTimed(u.getX(), u.getY(), time)

public function player.select(unit u)
	if localPlayer == this
		SelectUnit(u, true)

public function player.selectSingle(unit u)
	if localPlayer == this
		ClearSelection()
		SelectUnit(u, true)

public function player.setAbilityAvailable(int abilityId, boolean avail)
	SetPlayerAbilityAvailable(this, abilityId, avail)

public function player.setName(string name)
	SetPlayerName(this, name)



public function player.setState(playerstate state, int val)
	SetPlayerState(this, state, val)

public function player.subGold(int val)
	this.subState(PLAYER_STATE_RESOURCE_GOLD, val)

public function player.subState(playerstate state, int val)
	SetPlayerState(this, state, this.getState(state) - val)

/** Enables / disables user UI control for the player */
public function player.setUserControl(boolean enable)
	if localPlayer == this
		EnableUserControl(enable)

public function player.unselect(unit u)
	if localPlayer == this
		SelectUnit(u, false)

public function player.isIngame() returns boolean
	return this.getSlotState() == PLAYER_SLOT_STATE_PLAYING and this.getController() == MAP_CONTROL_USER

public function player.decTechResearched(int techId, int levels)
	BlzDecPlayerTechResearched(this, techId, levels)

public function player.forceStartLocation(int index)
	ForcePlayerStartLocation(this, index)

public function player.setPlayerAlliance(player otherPlayer, alliancetype whichAllianceSetting, boolean value)
	SetPlayerAlliance(this, otherPlayer, whichAllianceSetting, value)

public function player.setTaxRate(player otherPlayer, playerstate whichResource, integer rate)
	SetPlayerTaxRate(this, otherPlayer, whichResource, rate)

public function player.setRacePreference(racepreference whichRacePreference)
	SetPlayerRacePreference(this, whichRacePreference)

public function player.setRaceSelectable(boolean value)
	SetPlayerRaceSelectable(this, value)

public function player.getTeam() returns int
	return GetPlayerTeam(this)

public function player.isSelectable() returns bool
	return GetPlayerSelectable(this)

public function player.getTaxRate(player otherPlayer, playerstate whichResource) returns int
	return GetPlayerTaxRate(this, otherPlayer, whichResource)

public function player.isRacePrefSet(racepreference preference) returns bool
	return IsPlayerRacePrefSet(this, preference)

/** Sets the maximum allowed hero amount for a player */
public function player.setHeroMaxAllowed(int amount)
	SetPlayerMaxHeroesAllowed(amount, this)
		
/** Change tooltip (Name) of given ability for player locally.*/
public function player.setAbilityTooltip(int abilityId, string abilityName, int abilityLevel)
	this.setAbilityAvailable(abilityId, false)
	if localPlayer == this
		BlzSetAbilityTooltip(abilityId, abilityName, abilityLevel)
	this.setAbilityAvailable(abilityId, true)

/** Change extended tooltip (Description) of given ability for player locally.*/
public function player.setAbilityExtendedTooltip(int abilityId, string abilityDesc, int abilityLevel)
	this.setAbilityAvailable(abilityId, false)
	if localPlayer == this
		BlzSetAbilityExtendedTooltip(abilityId, abilityDesc, abilityLevel)
	this.setAbilityAvailable(abilityId, true)

/** Change icon of given ability for player locally.*/
public function player.setAbilityIcon(int abilityId, string abilityIcon)
	this.setAbilityAvailable(abilityId, false)
	if localPlayer == this
		BlzSetAbilityIcon(abilityId, abilityIcon)
	this.setAbilityAvailable(abilityId, true)

/** Update the given ability changing ability name, tooltip and icon (all optional) for the player locally.*/
public function player.updateAbility(int abilityId, int abilityLevel, string abilityName, string abilityDesc, string abilityIcon, bool allowEmpty)
	this.setAbilityAvailable(abilityId, false)
	if this != null and localPlayer == this
		if abilityName != "" or allowEmpty
			BlzSetAbilityTooltip(abilityId, abilityName, abilityLevel)
			BlzSetAbilityActivatedTooltip(abilityId, abilityName, abilityLevel)
		if abilityDesc != "" or allowEmpty
			BlzSetAbilityExtendedTooltip(abilityId, abilityDesc, abilityLevel)
			BlzSetAbilityActivatedExtendedTooltip(abilityId, abilityDesc, abilityLevel)
		if abilityIcon != "" or allowEmpty
			BlzSetAbilityIcon(abilityId, abilityIcon)
			BlzSetAbilityActivatedIcon(abilityId, abilityIcon)
	this.setAbilityAvailable(abilityId, true)

/** Update the given ability changing ability learn name and learn tooltip (all optional) for the player locally.*/
public function player.updateAbilityLearn(int abilityId, int abilityLevel, string abilityName, string abilityDesc, bool allowEmpty)
	if this != null and localPlayer == this
		this.setAbilityAvailable(abilityId, false)
		if abilityName != "" or allowEmpty
			BlzSetAbilityResearchTooltip(abilityId, abilityName, abilityLevel)
		if abilityDesc != "" or allowEmpty
			BlzSetAbilityResearchExtendedTooltip(abilityId, abilityDesc, abilityLevel)
		this.setAbilityAvailable(abilityId, true)
@Test
function testPlayer()
	let p = Player(0)
	assertTrue(p == Player(0))

