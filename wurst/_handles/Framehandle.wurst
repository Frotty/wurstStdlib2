package Framehandle
import NoWurst
import Player

/* New custom Framehandle types can be defined in template files, thus called frame definition files (*.fdf),
	these files needs to be listed inside of a toc file to be recognized by the wc3 engine.
	Default toc filePath: war3.w3mod:ui\framedef\framedef.toc
	Default fdf filePath: war3.w3mod:ui\framedef\ui\ || war3.w3mod:ui\framedef\glue\
		
	Multiplayer notes:
		Frames handling Player input won't sync their state. Player's input has only an effect on the localplayer.
		For example when a checkbox or an input field is displayed and Player 0 checks it / writes some input into it, this event happens only for Player 0.
		Therefore using BlzFrameGetText(Editbox) or BlzFrameGetValue(Slider) are likely to produce a desync, cause their values are local and differ, if some action is triggered based on these input values.
*/

/** Returns a framehandle to be used as custom frame based on a given originframetype as its parent:
		originframetype					possible indexes are used for subclasses (defaults 0)
			ORIGIN_FRAME_GAME_UI 				  --> default game ui frame
			ORIGIN_FRAME_WORLD_FRAME 			  --> visible playground, units items effects fog, the world frame decribes all general objects in the world
			ORIGIN_FRAME_HERO_BAR 				  --> masterpanel of all ORIGIN_FRAME_HERO_BUTTON
			ORIGIN_FRAME_HERO_BUTTON [0 to 6]     --> buttons of own/allied heroes potraits on the left of the screen
				ORIGIN_FRAME_HERO_HP_BAR, connected to HeroButtons
				ORIGIN_FRAME_HERO_MANA_BAR
				ORIGIN_FRAME_HERO_BUTTON_INDICATOR
			ORIGIN_FRAME_ITEM_BUTTON [0 to 5]     --> items inventory. updates on selection
			ORIGIN_FRAME_COMMAND_BUTTON [0 to 11] --> command buttons to order units, e.g. ITEM_BUTTON, updates on selection
			ORIGIN_FRAME_SYSTEM_BUTTON [0 to 3]   --> Menu, allies, Log, Quest
			ORIGIN_FRAME_PORTRAIT 	              --> portrait of the main selected Unit
			ORIGIN_FRAME_MINIMAP
			ORIGIN_FRAME_MINIMAP_BUTTON
			ORIGIN_FRAME_TOOLTIP
			ORIGIN_FRAME_UBERTOOLTIP
			ORIGIN_FRAME_CHAT_MSG
			ORIGIN_FRAME_UNIT_MSG
*/
public function getOriginFrame(originframetype frameType, integer index) returns framehandle
    return BlzGetOriginFrame(frameType,index)

/**	Returns a framehandle to be used as custom frame based on a given frame name (see FramehandleNames.FramhandleDefaultNames) */
public function getFrameByName(string name, integer createContext) returns framehandle
    return BlzGetFrameByName(name,createContext)

/** Creates a custom frame by frame name (see (see FramehandleNames.FramehandleDefaultNames)) */
public function createFrame(string name,framehandle owner,integer priority,integer createContext) returns framehandle
    return BlzCreateFrame(name,owner,priority,createContext)
    
/** Creates a custom frame with limited options based on a given base frame name, see getFrameByName */
public function createSimpleFrame(string name,framehandle owner,integer createContext) returns framehandle
    return BlzCreateSimpleFrame(name,owner,createContext)
    
/** Creates a custom frame with a predefined typename inside of a frame definition file (fdf) and listed by a toc file		
	example usage:
		let mainFrame = createFrameByType("MENU", "My PopUpMenu", parentFrame, "StandardSmallPopupMenuTemplate", 0)
		let subFrame  = createFrameByType("BACKDROP", "My PopUpMenu", mainFrame, "StandardPopupMenuBackdropTemplate", 0)
*/
public function createFrameByType(string typeName,string name,framehandle owner,string inherits,integer createContext) returns framehandle
    return BlzCreateFrameByType(typeName,name,owner,inherits,createContext)

public function framehandle.remove()
    BlzDestroyFrame(this)

/** Sets a frames position aligned on predefined framepoint of another frame, while the abosute position gets ignored */
public function framehandle.setPoint(framepointtype point,framehandle relative,framepointtype relativePoint,real x,real y)
    BlzFrameSetPoint(this,point,relative,relativePoint,x,y)

/**	Sets the frame position to an absolute x, y point ons the screen
		0 -->   0% min screensize pos
		1 --> 100% max screensize pos
*/
public function framehandle.setAbsPoint(framepointtype point,real x, real y)
    BlzFrameSetAbsPoint(this,point,x,y)

/** TODO, unkown */
public function framehandle.clearAllPoints()
    BlzFrameClearAllPoints(this)

/** TODO, unkown */
public function framehandle.setAllPoints(framehandle relative)
    BlzFrameSetAllPoints(this,relative)

/** Shows the given frame */
public function framehandle.show()
    BlzFrameSetVisible(this,true)

/** Shows the given frame for a specific player */
public function framehandle.showFor(player p)
    if localPlayer == p
        BlzFrameSetVisible(this,true)

/** Hides the given frame */
public function framehandle.hide()
    BlzFrameSetVisible(this,false)

/** Hides the given frame for a specific player */
public function framehandle.hideFor(player p)
    if localPlayer == p
        BlzFrameSetVisible(this,false)

/** Obtains whether the given frame is visible or not */
public function framehandle.isVisible() returns boolean
    return BlzFrameIsVisible(this)

/** Obtains the frames name */
public function framehandle.name() returns string
    return BlzFrameGetName(this)

/** Evokes a click a event on a given frame */
public function framehandle.click()
    BlzFrameClick(this)

/** Obtains the text set of a given frame */
public function framehandle.text() returns string
    return BlzFrameGetText(this)

/** Sets the text of a given frame */
public function framehandle.text(string text)
    BlzFrameSetText(this,text)

/** Obtains the maximum allowed text size of a given frame */
public function framehandle.textSizeLimit() returns integer
    return BlzFrameGetTextSizeLimit(this)

/** Sets the maximum allowed text size of a given frame */
public function framehandle.textSizeLimit(integer size)
    BlzFrameSetTextSizeLimit(this,size)

/** Obtains the text color of a given frame */
public function framehandle.textColor(integer color)
    BlzFrameSetTextColor(this,color)

/** En/disables the input focus of a given frame */
public function framehandle.focus(boolean flag)
    BlzFrameSetFocus(this,flag)

public function framehandle.model(string modelFile, integer cameraIndex)
    BlzFrameSetModel(this,modelFile,cameraIndex)
	
/** Obtains enabled user interaction state of the frame */
public function framehandle.enable() returns boolean
    return BlzFrameGetEnable(this)

/** En/Disables user interaction with the frame */
public function framehandle.enable(boolean enabled)
    BlzFrameSetEnable(this,enabled)

/** Obtains the decimal alpha value of a frame (only for specific frames) */
public function framehandle.alpha() returns int
    return BlzFrameGetAlpha(this)

/** Sets the decimal alpha value of a frame (only for specific frames) */
public function framehandle.alpha(integer alpha)
    BlzFrameSetAlpha(this,alpha)

/** TODO */	
public function framehandle.spriteAnimate(integer primaryProp, integer flags)
    BlzFrameSetSpriteAnimate(this,primaryProp,flags)

/** Sets the texture definition for the frame, can be used generate backgrounds with alpha transparency or more other more complex definitions:
	example: 
	Texture {
        File "ConsoleTexture05",
        Width 0.256,
        Height 0.032,
        TexCoord 0, 1, 0, 0.125
        AlphaMode "ALPHAKEY",
        Anchor TOPLEFT,-0.256,0,
    }
 */
public function framehandle.texture(string texFile, integer flag, boolean blend)
    BlzFrameSetTexture(this,texFile,flag,blend) 

/** Sets the frames scaling value based on its current size */
public function framehandle.scale(real scale)
    BlzFrameSetScale(this,scale)   

/** Sets a frames tooltop frame, if it has some tooltip subframe */
public function framehandle.tooltip(framehandle tooltip)
    BlzFrameSetTooltip(this,tooltip)   
    
/** Forces the mouse cursor to stay (caged) inside of the given frame */
public function framehandle.cageMouse(boolean enable)
    BlzFrameCageMouse(this,enable)   

/** Obtains the specific value of the frame (e.g. for sliders) */
public function framehandle.value() returns real
    return BlzFrameGetValue(this)

/** Sets the specific value of the frame (e.g. for sliders) */
public function framehandle.value(real value)
    BlzFrameSetValue(this,value)

/** Sets the specific minimum and maximum value of the frame (e.g. for sliders) *7
public function framehandle.minMax(real minValue, real maxValue)
    BlzFrameSetMinMaxValue(this,minValue,maxValue)

/** TODO */
public function framehandle.stepSize(real stepSize)
    BlzFrameSetStepSize(this,stepSize)

/** Sets the width and height of a given frame  */
public function framehandle.size(real width, real height)
    BlzFrameSetSize(this,width,height)

/** Sets the vertex color of a given frame  */
public function framehandle.vertexColor(integer color)
    BlzFrameSetVertexColor(this,color)

public function framehandle.level(integer level)
    BlzFrameSetLevel(this,level)

/** Searches for the frames parent frame, should be used with caution as getting the parent of any top most frame will lead into a void crash */
public function framehandle.parent() returns framehandle
    return BlzFrameGetParent(this)

/** Sets the parent frame for given custom created frame */
public function framehandle.parent(framehandle parent)
    BlzFrameSetParent(this,parent)

/** Obtains the qualified size of height of a given frame (0-1) */
public function framehandle.height() returns real
    return BlzFrameGetHeight(this)

/** Obtains the qualified size of width of a given frame (0-1) */
public function framehandle.width() returns real
    return BlzFrameGetWidth(this)

/** Sets the used text font of a given frame */
public function framehandle.font(string fileName, real height, integer flags)
    BlzFrameSetFont(this,fileName,height,flags)

/** Set the used text alignment of a given frame */
public function framehandle.textAlignment(textaligntype vert, textaligntype horz)
    BlzFrameSetTextAlignment(this,vert,horz)
	
/** En/disables auto positioning of ui elements */
public function enableUIAutoPosition(boolean flag)
    BlzEnableUIAutoPosition(flag)

/** Hides or shows all origin frames */
public function hideOriginFrames(boolean flag)
    BlzHideOriginFrames(flag)

/** Loads a toc file from a specific path, to include custom fdf files from, returns true on success */
public function loadTOCFile(string tocFile) returns bool
    return BlzLoadTOCFile(tocFile)
