package Group
import NoWurst
import Vectors

/** Use this group for your non-nested group enum calls
	and then iterate through the group via **for from** or
	clear the group after use */
public constant ENUM_GROUP = CreateGroup()

public function group.enumUnitsInRange(vec2 pos, real range)
	GroupEnumUnitsInRange(this, pos.x, pos.y, range, null)
	
public function group.enumUnitsInRange(vec2 pos, real range, boolexpr filter)
	GroupEnumUnitsInRange(this, pos.x, pos.y, range, filter)

public function group.enumUnitsInRect(rect rec) 
	this.enumUnitsInRect(rec, null) 
	
public function group.enumUnitsInRect(rect rec, boolexpr filter) 
	GroupEnumUnitsInRect(this, rec, filter) 

public function group.enumUnitsSelected(player p, boolexpr filter)
	GroupEnumUnitsSelected(this, p, filter)

public function group.clear()
	GroupClear(this)
	
public function group.addUnit(unit u)
	GroupAddUnit(this, u)
	
public function group.removeUnit(unit u)
	GroupRemoveUnit(this, u)
	
public function group.destr()
	DestroyGroup(this)
	
public function group.contains(unit u) returns boolean
	return IsUnitInGroup(u, this)

var unitCounter = 0
public function group.size() returns int
	unitCounter = 0
	ForGroup(this) ->
		unitCounter++

	return unitCounter

public function group.isEmpty() returns boolean
	return not this.hasNext()

var randomCounter = 0
unit randomSelected = null
/** Returns a random unit from this grouo without removing it
	or null if the group is empty */
public function group.getRandomUnit() returns unit
	let size = this.size()
	randomCounter = 1 + GetRandomInt(0, size-1)
	randomSelected = null
	ForGroup(this) ->
		randomCounter--
		if randomCounter == 0
			randomSelected = GetEnumUnit()

	return randomSelected
	
/* Group iterator */

group iterGroup

/** Creates a new iterator for this group. */
public function group.iterator() returns group
	iterGroup = CreateGroup()
	ForGroup(this, () -> iterGroup.addUnit(GetEnumUnit()))
	return iterGroup

/** Returns whether the iterator has the next item */
public function group.hasNext() returns boolean
	return FirstOfGroup(this) != null

/** Returns the next item from the iterator */
public function group.next() returns unit
	let iterUnit = FirstOfGroup(this)
	GroupRemoveUnit(this, iterUnit) 
	return iterUnit
	
/** Closes the iterator, releaseing the group */
public function group.close()
	this.clear()
	this.destr()