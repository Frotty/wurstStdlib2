package Force
import NoWurst

public constant allPlayers = CreateForce()
/** Players under the control of users which are in the game. Leavers will be removed from the force automatically. */
public constant userPlayers = CreateForce()

public function force.destr()
	DestroyForce(this)

public function force.addPlayer(player whichPlayer)
	ForceAddPlayer(this, whichPlayer)

public function force.addPlayers(vararg player players)
	for whichPlayer in players
		ForceAddPlayer(this, whichPlayer)

public function force.removePlayer(player whichPlayer)
	ForceRemovePlayer(this, whichPlayer)

public function force.removePlayers(vararg player players)
	for whichPlayer in players
		ForceRemovePlayer(this, whichPlayer)

public function force.clear()
	ForceClear(this)

public function force.enumPlayers(boolexpr filter)
	ForceEnumPlayers(this, filter)

public function force.enumPlayersCounted(boolexpr filter, int countLimit)
	ForceEnumPlayersCounted(this, filter, countLimit)

public function force.enumAllies(player whichPlayer, boolexpr filter)
	ForceEnumAllies(this, whichPlayer, filter)

public function force.enumEnemies(player whichPlayer, boolexpr filter)
	ForceEnumEnemies(this, whichPlayer, filter)

public function force.forEach(code callback)
	ForForce(this, callback)

public function force.containsUnit(unit whichUnit) returns boolean
	return IsUnitInForce(whichUnit, this)

public function force.containsPlayer(player whichPlayer) returns boolean
	return IsPlayerInForce(whichPlayer, this)

int size
public function force.size() returns int
	size = 0
	this.forEach()->
		size++
	return size

class ForceIterator
	private int offset
	private int count
	private int current

	private static player array players
	private static int index

	construct(force f)
		offset = this castTo int * bj_MAX_PLAYER_SLOTS
		index = offset
		f.forEach() ->
			players[index] = GetEnumPlayer()
			index++
		count = index - offset
		current = 0

	function hasNext() returns bool
		return current < count

	function next() returns player
		let p = current < count ? players[offset + current] : null
		current++
		return p

	function close()
		destroy this

public function force.iterator() returns ForceIterator
	return new ForceIterator(this)

init
	for i=0 to bj_MAX_PLAYER_SLOTS-1
		let p = Player(i)
		allPlayers.addPlayer(p)
		if GetPlayerController(p) == MAP_CONTROL_USER and GetPlayerSlotState(p) == PLAYER_SLOT_STATE_PLAYING
			userPlayers.addPlayer(p)

	let trg = CreateTrigger()
	TriggerAddAction(trg, ()->userPlayers.removePlayer(GetTriggerPlayer()))
	for p in userPlayers
		TriggerRegisterPlayerEvent(trg, p, EVENT_PLAYER_LEAVE)


