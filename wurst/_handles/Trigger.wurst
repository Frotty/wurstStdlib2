package Trigger
import NoWurst
import Vectors

public enum OSKEY_META
	NONE
	SHIFT
	CTRL

public function OSKEY_META.toInt() returns int
	return this castTo int


public function trigger.addAction(code actionFunc) returns triggeraction
	return TriggerAddAction(this, actionFunc)

public function trigger.addCondition(boolexpr condition) returns triggercondition
	return TriggerAddCondition(this, condition)

public function trigger.clearConditions()
	TriggerClearConditions(this)

public function trigger.clearActions()
	TriggerClearActions(this)

public function trigger.destr()
	DestroyTrigger(this)

public function trigger.disable()
	DisableTrigger(this)

public function trigger.enable()
	EnableTrigger(this)

public function trigger.evaluate() returns boolean
	return TriggerEvaluate(this)

public function trigger.execute()
	TriggerExecute(this)

public function trigger.executeWait()
	TriggerExecuteWait(this)

public function trigger.isEnabled() returns boolean
	return IsTriggerEnabled(this)

public function trigger.waitOnSleeps(boolean flag)
	TriggerWaitOnSleeps(this, flag)

public function trigger.isWaitOnSleeps() returns boolean
	return IsTriggerWaitOnSleeps(this)

public function trigger.getEvalCount() returns int
	return GetTriggerEvalCount(this)

public function trigger.getExecCount() returns int
	return GetTriggerExecCount(this)

public function trigger.registerAnyUnitEvent(playerunitevent whichEvent)
	TriggerRegisterAnyUnitEventBJ(this, whichEvent)

public function trigger.registerDeathEvent(widget whichWidget) returns event
	return TriggerRegisterDeathEvent(this, whichWidget)

public function trigger.registerDialogButtonEvent(button whichButton) returns event
	return TriggerRegisterDialogButtonEvent(this, whichButton)

public function trigger.registerDialogEvent(dialog whichDialog) returns event
	return TriggerRegisterDialogEvent(this, whichDialog)

public function trigger.registerEnterRegion(region whichRegion, boolexpr filter) returns event
	return TriggerRegisterEnterRegion(this, whichRegion, filter)

public function trigger.registerGameEvent(gameevent whichGameEvent) returns event
	return TriggerRegisterGameEvent(this, whichGameEvent)

public function trigger.registerGameStateEvent(gamestate whichState, limitop opcode, real limitval) returns event
	return TriggerRegisterGameStateEvent(this, whichState, opcode, limitval)

public function trigger.registerLeaveRegion(region whichRegion, boolexpr filter) returns event
	return TriggerRegisterLeaveRegion(this, whichRegion, filter)

public function trigger.registerPlayerChatEvent(player whichPlayer, string chatMessageToDetect, boolean exactMatchOnly) returns event
	return TriggerRegisterPlayerChatEvent(this, whichPlayer, chatMessageToDetect, exactMatchOnly)

public function trigger.registerPlayerEvent(player whichPlayer, playerevent whichPlayerEvent) returns event
	return TriggerRegisterPlayerEvent(this, whichPlayer, whichPlayerEvent)

public function trigger.registerPlayerStateEvent(player whichPlayer, playerstate whichState, limitop opcode, real limitval) returns event
	return TriggerRegisterPlayerStateEvent(this, whichPlayer, whichState, opcode, limitval)

public function trigger.registerPlayerUnitEvent(player whichPlayer, playerunitevent whichPlayerUnitEvent, boolexpr filter) returns event
	return TriggerRegisterPlayerUnitEvent(this, whichPlayer, whichPlayerUnitEvent, filter)

public function trigger.registerPlayerAllianceChange(player whichPlayer, alliancetype whichAlliance) returns event
	return TriggerRegisterPlayerAllianceChange(this, whichPlayer, whichAlliance)

public function trigger.registerPlayerSync(player whichPlayer, alliancetype whichAlliance) returns event
	return TriggerRegisterPlayerAllianceChange(this, whichPlayer, whichAlliance)

public function trigger.registerPlayerKeyPress(player whichPlayer, oskeytype key, OSKEY_META metaKey, bool onKeyDown) returns event
	return BlzTriggerRegisterPlayerKeyEvent(this, whichPlayer, key, metaKey.toInt(), onKeyDown)

public function trigger.registerTimerEvent(real timeout, boolean periodic) returns event
	return TriggerRegisterTimerEvent(this, timeout, periodic)

public function trigger.registerTimerExpireEvent(timer whichTimer) returns event
	return TriggerRegisterTimerExpireEvent(this, whichTimer)

public function trigger.registerTrackableHitEvent(trackable whichTrackable) returns event
	return TriggerRegisterTrackableHitEvent(this, whichTrackable)

public function trigger.registerTrackableTrackEvent(trackable whichTrackable) returns event
	return TriggerRegisterTrackableTrackEvent(this, whichTrackable)

public function trigger.registerUnitEvent(unit whichUnit, unitevent whichEvent) returns event
	return TriggerRegisterUnitEvent(this, whichUnit, whichEvent)

public function trigger.registerFilterUnitEvent(unit whichUnit, unitevent whichEvent, boolexpr filter) returns event
	return TriggerRegisterFilterUnitEvent(this, whichUnit, whichEvent, filter)

public function trigger.registerUnitInRange(unit whichUnit, real range, boolexpr filter) returns event
	return TriggerRegisterUnitInRange(this, whichUnit, range, filter)

public function trigger.registerUnitStateEvent(unit whichUnit, unitstate whichState, limitop opcode, real limitval) returns event
	return TriggerRegisterUnitStateEvent(this, whichUnit, whichState, opcode, limitval)

/**
	registers a frameevent with given type for given frame, the triggered callback will contain following informations:
		BlzGetTriggerFrame      - the source frame of the event
		BlzGetTriggerFrameEvent - the type of the frame event
		GetTriggerPlayer        - the player causing the event
**/
public function trigger.registerFrameEvent(framehandle frame, frameeventtype eventId) returns event
	return BlzTriggerRegisterFrameEvent(this, frame, eventId)

public function trigger.removeAction(triggeraction action)
	TriggerRemoveAction(this, action)

public function trigger.removeCondition(triggercondition condition)
	TriggerRemoveCondition(this, condition)

public function trigger.reset()
	ResetTrigger(this)

/** This static class contains all possible TRIGGER/EVENT Getters and Setters.
	! Must be used inside trigger action only!
	! Do not use inside closures as it will misbehave, always declare results from these getters to variables!
	*/
public class Trigger
//========
// GETTERS
//========
	private construct()
	/////////////////////
	// boolean getters //
	/////////////////////
	static function getIsKeyDown() returns boolean
		return BlzGetTriggerPlayerIsKeyDown()

	//////////////////
	// Unit getters //
	//////////////////
	static function getUnit() returns unit
		return GetTriggerUnit()

	static function getUnitEntering() returns unit
		return GetEnteringUnit()

	static function getUnitLeaving() returns unit
		return GetLeavingUnit()

	static function getUnitLevelling() returns unit
		return GetLevelingUnit()

	static function getUnitLearning() returns unit
		return GetLearningUnit()

	static function getUnitRevivable() returns unit
		return GetRevivableUnit()

	static function getUnitReviving() returns unit
		return GetRevivingUnit()

	static function getUnitAttacker() returns unit
		return GetAttacker()

	static function getUnitRescuer() returns unit
		return GetRescuer()

	static function getUnitDying() returns unit
		return GetDyingUnit()

	static function getUnitKiller() returns unit
		return GetKillingUnit()

	static function getUnitDecaying() returns unit
		return GetDecayingUnit()

	/*static function getUnitSelected() returns unit
		return GetSelectedUnit()*/ // Commented out in common.j

	/** Returns the unit which constructs the structure.*/
	static function getUnitConstructing() returns unit
		return GetConstructingStructure()

	/** Returns the building which is being constructed.*/
	static function getUnitConstructed() returns unit
		return GetConstructedStructure()

	/** Returns the building which was being constructed but as cancelled.*/
	static function getUnitConstructedCancelled() returns unit
		return GetCancelledStructure()

	static function getUnitResearching() returns unit
		return GetResearchingUnit()

	static function getUnitTrained() returns unit
		return GetTrainedUnit()

	static function getUnitDetected() returns unit
		return getUnitDetected()
	
	static function getUnitSummoning() returns unit
		return GetSummoningUnit()

	static function getUnitSummoned() returns unit
		return GetSummonedUnit()

	/** Get unit that is transporting. */ 
	static function getUnitTransport() returns unit
		return GetTransportUnit()
	
	/** Get unit thas is loaded to transport. */
	static function getUnitLoaded() returns unit
		return GetLoadedUnit()

	static function getUnitSeller() returns unit
		return GetSellingUnit()

	static function getUnitSold() returns unit
		return GetSoldUnit()
	
	static function getUnitBuyer() returns unit
		return GetBuyingUnit()

	static function getUnitChanging() returns unit
		return GetChangingUnit()

	static function getUnitManipulatingItem() returns unit
		return GetManipulatingUnit()
	
	static function getUnitOrdered() returns unit
		return GetOrderedUnit()

	static function getUnitOrderTarget() returns unit
		return GetOrderTargetUnit()

	static function getUnitAbilitySource() returns unit
		return GetSpellAbilityUnit()

	static function getUnitAbilityTarget() returns unit
		return GetSpellTargetUnit()

	static function getUnitDamageSource() returns unit
		return GetEventDamageSource()
	
	static function getUnitTarget() returns unit
		return GetEventTargetUnit()

	static function getDamageTarget() returns unit
		return BlzGetEventDamageTarget()

	//////////////////
	// int getters  //
	//////////////////
	static function getAbilityIdLearned() returns int
		return GetLearnedSkill()
	
	static function getAbilityLevelLearned() returns int
		return GetLearnedSkillLevel()

	/** Return unitTypeId of unit that was researched. */
	static function getUnitTypeResearched() returns int
		return GetResearched()

	static function getUnitTypeTrained() returns int
		return GetTrainedUnitType()
	
	static function getOrderIdIssued() returns int
		return GetIssuedOrderId()

	static function getAbilityIdSpell() returns int
		return GetSpellAbilityId()
	
	//////////////////
	// real getters //
	//////////////////
	/** Return damage done by Unit to another target unit. */
	static function getDamage() returns real
		return GetEventDamage()

	static function getOrderX() returns real
		return GetOrderPointX()

	static function getOrderY() returns real
		return GetOrderPointY()

	static function getAbilityTargetX() returns real
		return GetSpellTargetX()

	static function getAbilityTargetY() returns real
		return GetSpellTargetY()

	static function getMouseX() returns real
		return BlzGetTriggerPlayerMouseX()

	static function getMouseY() returns real
		return BlzGetTriggerPlayerMouseY()

	/////////////////////
	// string getters ///
	/////////////////////
	static function getSaveFilename() returns string
		return GetSaveBasicFilename()

	static function getChatMessage() returns string
		return GetEventPlayerChatString()

	static function getChatMessageMatched() returns string
		return GetEventPlayerChatStringMatched()

	static function getSyncPrefix() returns string
		return BlzGetTriggerSyncPrefix()

	static function getSyncData() returns string
		return BlzGetTriggerSyncData()

	///////////////////
	// item getters ///
	///////////////////
	static function getItemSold() returns item
		return GetSoldItem()

	static function getItemManipulated() returns item
		return GetManipulatedItem()

	static function getItemOrderTarget() returns item
		return GetOrderTargetItem()

	static function getItemAbilityTarget() returns item
		return GetSpellTargetItem()

	/////////////////////
	// player getters ///
	/////////////////////
	static function getPlayer() returns player
		return GetTriggerPlayer()
		
	static function getPlayerWinner() returns player
		return GetWinningPlayer()
		
	static function getPlayerDetecting() returns player
		return GetEventDetectingPlayer()

	static function getPlayerTournamentFinish() returns player
		return GetTournamentFinishNowPlayer()

	static function getPlayerChangingUnitPreviousOwner() returns player
		return GetChangingUnitPrevOwner()		
		
	static function getPlayerState() returns playerstate
		return GetEventPlayerState()


	////////////////////////////
	// other handles getters ///
	////////////////////////////
	static function getAbility() returns ability
		return GetSpellAbility()

	static function getDestructable() returns destructable
		return GetTriggerDestructable()

	static function getDestructableOrderTarget() returns destructable
		return GetOrderTargetDestructable()

	static function getDestructableSpellTarget() returns destructable
		return GetSpellTargetDestructable()

	static function getDialog() returns dialog
		return GetClickedDialog()

	static function getDialogButton() returns button
		return GetClickedButton()

	static function getGameState() returns gamestate
		return GetEventGameState()

	static function getRegion() returns region
		return GetTriggeringRegion()

	static function getTimerExpired() returns timer
		return GetExpiredTimer()

	static function getWidget() returns widget
		return GetTriggerWidget()

	static function getWidgetOrderTarget() returns widget
		return GetOrderTarget()

	static function getDamageType() returns damagetype
		return BlzGetEventDamageType()

	static function getDamageAttackType() returns attacktype
		return BlzGetEventAttackType()

	static function getDamageWeaponType() returns weapontype
		return BlzGetEventWeaponType()

	static function getKeyPressed() returns oskeytype
		return BlzGetTriggerPlayerKey()

	static function getKeyMetaPressed() returns OSKEY_META
		return BlzGetTriggerPlayerMetaKey() castTo OSKEY_META

	static function getFrame() returns framehandle
		return BlzGetTriggerFrame()

	static function getFrameEvent() returns frameeventtype
		return BlzGetTriggerFrameEvent()

	/////////////////////
	// special getters //
	/////////////////////
	static function getOrderVec2() returns vec2
		return vec2(GetOrderPointX(), GetOrderPointY())

	static function getAbilityTargetVec2() returns vec2
		return vec2(GetSpellTargetX(), GetSpellTargetY())

	static function getMouseVec2() returns vec2
		return vec2(BlzGetTriggerPlayerMouseX(), BlzGetTriggerPlayerMouseY())

//========
// SETTERS
//========
	/** Change damage from damage event.*/
	static function setDamage(real damage)
		BlzSetEventDamage(damage)

	/** Change damage from damage event.*/
	static function setDamageAttackType(attacktype attackType)
		BlzSetEventAttackType(attackType)

	/** Change damage from damage event.*/
	static function setDamageType(damagetype damageType)
		BlzSetEventDamageType(damageType)

	/** Change damage from damage event.*/
	static function setDamageWeaponType(weapontype weaponType)
		BlzSetEventWeaponType(weaponType)
