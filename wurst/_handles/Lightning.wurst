package Lightning
import NoWurst
import Vectors
import Colors

enum LightningType
	ChainLightningPrimary
	ChainLightningSecondary
	Drain
	DrainLife
	DrainMana
	FingerofDeath
	ForkedLightning
	HealingWavePrimary
	HealingWaveSecondary
	LightningAttack
	MagicLeash
	ManaBurn
	ManaFlare
	SpiritLink

function LightningType.toString() returns string
	string s = ""
	switch this
		case ChainLightningPrimary
			s = "CLPB"
		case ChainLightningSecondary
			s = "CLSB"
		case Drain
			s = "DRAB"
		case DrainLife
			s = "DRAL"
		case DrainMana
			s = "DRAM"
		case FingerofDeath
			s = "AFOD"
		case ForkedLightning
			s = "FORK"
		case HealingWavePrimary
			s = "HWPB"
		case HealingWaveSecondary
			s = "HWSB"
		case LightningAttack
			s = "CHIM"
		case MagicLeash
			s = "LEAS"
		case ManaBurn
			s = "MBUR"
		case ManaFlare
			s = "MFPB"
		case SpiritLink
			s = "SPLK"
	return s

public function addLightning(LightningType lType, bool checkVisibility, vec2 start, vec2 _end) returns lightning
	return AddLightning(lType.toString(), checkVisibility, start.x, start.y, _end.x, _end.y)

public function addLightning(LightningType lType, bool checkVisibility, vec3 start, vec3 _end) returns lightning
	return AddLightningEx(lType.toString(), checkVisibility, start.x, start.y, start.z, _end.x, _end.y, _end.z)
	
public function lightning.move(bool checkVisibility, vec2 start, vec2 _end) returns bool
	return MoveLightning(this, checkVisibility, start.x, start.y, _end.x, _end.y)

public function lightning.move(bool checkVisibility, vec3 start, vec3 _end) returns bool
	return MoveLightningEx(this, checkVisibility, start.x, start.y, start.z, _end.x, _end.y, _end.z)

public function lightning.setColor(colorA c) returns boolean
	return SetLightningColor(this, c.red / 255, c.green / 255, c.blue / 255, c.alpha / 255)
	
public function lightning.setColor(color c) returns boolean
	return SetLightningColor(this, c.red / 255, c.green / 255, c.blue / 255, 1)

public function lightning.getColor() returns color
	return color((255 * GetLightningColorR(this) + .5).toInt(), (255 * GetLightningColorG(this) + .5).toInt(), (255 * GetLightningColorB(this) + .5).toInt())
public function lightning.getColorA() returns colorA
	return this.getColor().withAlpha((255 * GetLightningColorA(this) + .5).toInt())
	
public function lightning.destr() returns bool
	return DestroyLightning(this)
