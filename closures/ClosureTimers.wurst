package ClosureTimers
import NoWurst
import TimerUtils
import Real
/** Execute an action after a certain time. 
	The callback object is automatically destroyed.
	
	Example use:
	| doAfter(10.0, () -> begin
	|     print("10 seconds later")		
	| end) */			
public function doAfter(real timeToWait, CallbackSingle cb) returns CallbackSingle
	cb.start(timeToWait)
	return cb
	
/** Execute an action with a 0-second timer delay.
	The callback object is destroyed afterwards.
*/
public function nullTimer(CallbackSingle cb) returns CallbackSingle
	doAfter(0, cb)
	return cb
	
/** Execute an action periodically.
	The callback has to be destroyed manually.
	
	Example use:
	| doPeriodically(0.5, (CallbackPeriodic cb) -> begin
	|     if i > 10
			destroy cb
	| end)
*/
public function doPeriodically(real time, CallbackPeriodic cb) returns CallbackPeriodic
	cb.start(time)
	return cb
	
/** execute an action periodically, with a limited amount of calls 
	The callback object is destroyed after the action has been executed callAmount times.
	
	Example use:
	| doPeriodicallyCounted(0.5, 100, (CallbackCounted cb) -> begin
	|     doSomething()		
	| end)
	
*/
public function doPeriodicallyCounted(real time, int callAmount, CallbackCounted cb) returns CallbackCounted
	cb.start(time, callAmount)
	return cb
/** execute an action periodically, with a limited duration 
	The callback object is destroyed afterwards.
	
	Example use:
	| doPeriodicallyCounted(0.5, 10., () -> begin
	|     doSomething()		
	| end)
	
*/	
public function doPeriodicallyTimed(real interval, real timerDuration, CallbackCounted cb) returns CallbackCounted
	doPeriodicallyCounted(interval, (timerDuration / interval + 0.5).toInt(), cb)
	return cb

//Timer Stuff	
public abstract class CallbackSingle
	private timer t
	abstract function call()
	
	function start(real time)
		t = getTimer()
			..setData(this castTo int)
			..start(time, () -> staticCallback())
			
			
	private static function staticCallback()
		timer t = GetExpiredTimer()
		thistype cb = t.getData() castTo thistype
		cb.call()
		destroy cb
		
	ondestroy
		t.release()
		

public abstract class CallbackPeriodic
	private timer t
	
	protected abstract function call(thistype cb)

	function start(real time)
		this.t = getTimer()
		t.setData(this castTo int)
		t.startPeriodic(time, function staticCallback)
		
	private static function staticCallback()
		let cb = (GetExpiredTimer().getData() castTo thistype)
		cb.call(cb)
		
	ondestroy
		t.release()
		
public abstract class CallbackCounted
	private timer t
	private int count = 0
	
	protected abstract function call(thistype cb)

	function start(real time, int callAmount)
		this.t = getTimer()
		t.setData(this castTo int)
		count = callAmount
		t.startPeriodic(time, function staticCallback)
		
	function isLast() returns boolean
		return count == 1
		
	function getCount() returns int
		return count
		
	function stop()
		count = 1
		
	private static function staticCallback()
		(GetExpiredTimer().getData() castTo thistype).callAndCount()
		
	private function callAndCount()
		call(this)
		count--
		if count <= 0
			destroy this
		
	ondestroy
		t.release()
		

	